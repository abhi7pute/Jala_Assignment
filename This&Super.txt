1: Print the fields/instance members of the current class using `this` and without using an object.
class MyClass {
    int field1 = 10;
    String field2 = "Hello";

    void printFields() {
        System.out.println(this.field1);
        System.out.println(this.field2);
    }

    public static void main(String[] args) {
        MyClass myObject = new MyClass();
        myObject.printFields();
    }
}
2: Print the fields/instance members of the parent class using `super`.
class ParentClass {
    int parentField = 5;
}

class ChildClass extends ParentClass {
    int childField = 10;

    void printFields() {
        System.out.println(super.parentField);
        System.out.println(this.childField);
    }

    public static void main(String[] args) {
        ChildClass childObject = new ChildClass();
        childObject.printFields();
    }
}
3: Call the constructor of the current class using `this()`.
class MyClass {
    MyClass() {
        System.out.println("Constructor of MyClass");
    }

    MyClass(int value) {
        this(); // Calling the no-argument constructor
        System.out.println("Parameterized constructor of MyClass with value: " + value);
    }

    public static void main(String[] args) {
        MyClass obj = new MyClass(42);
    }
}
4: Call the argument constructor of the current class using `this()`.
class MyClass {
    MyClass() {
        System.out.println("No-argument constructor of MyClass");
    }

    MyClass(int value) {
        this(); // Calling the no-argument constructor
        System.out.println("Parameterized constructor of MyClass with value: " + value);
    }

    public static void main(String[] args) {
        MyClass obj = new MyClass(42);
    }
}
5: Call the constructor of the parent class using `super()`.
class ParentClass {
    ParentClass() {
        System.out.println("Constructor of ParentClass");
    }
}

class ChildClass extends ParentClass {
    ChildClass() {
        super(); // Calling the constructor of the parent class
        System.out.println("Constructor of ChildClass");
    }

    public static void main(String[] args) {
        ChildClass obj = new ChildClass();
    }
}
6: Use `this()` and `super()` in methods, not in constructors.
class MyClass {
    int value = 42;

    void methodA() {
        System.out.println("Inside methodA");
        this.methodB(); // Using this to call another method in the same class
        super.methodC(); // Using super to call a method from the parent class
    }

    void methodB() {
        System.out.println("Inside methodB");
    }

    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.methodA();
    }
}

class ParentClass {
    void methodC() {
        System.out.println("Inside methodC in ParentClass");
    }
}
